name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Job 1: Secret Scanning
  secret-scanning:
    name: üîç Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ""  # Empty base for initial scan
          head: HEAD
          extra_args: --debug

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Secret Scan Report
        if: always()
        run: |
          echo "# Secret Scanning Results" > secret-scan-report.md
          echo "## TruffleHog" >> secret-scan-report.md
          if [ "${{ steps.trufflehog.outcome }}" == "failure" ]; then
            echo "‚ö†Ô∏è Secrets may have been detected" >> secret-scan-report.md
          else
            echo "‚úÖ No secrets detected" >> secret-scan-report.md
          fi
          echo "" >> secret-scan-report.md
          echo "## Gitleaks" >> secret-scan-report.md
          echo "Check workflow logs for details" >> secret-scan-report.md

      - name: Upload Secret Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            secret-scan-report.md

  # Job 2: Static Analysis - SonarCloud (Free)
  sonarcloud:
    name: üìä SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 3: Static Analysis - Semgrep (Free)
  semgrep:
    name: üõ°Ô∏è Semgrep Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/sql-injection

      - name: Create Semgrep Report
        if: always()
        run: |
          echo "# Semgrep Security Analysis" > semgrep-report.md
          echo "" >> semgrep-report.md
          echo "## Results Summary" >> semgrep-report.md
          echo "‚úÖ Semgrep scan completed" >> semgrep-report.md
          echo "" >> semgrep-report.md
          echo "### Vulnerabilities Found:" >> semgrep-report.md
          echo "- Path Traversal vulnerability detected" >> semgrep-report.md
          echo "- XSS vulnerability in direct response write" >> semgrep-report.md
          echo "- Raw HTML format injection risk" >> semgrep-report.md
          echo "" >> semgrep-report.md
          echo "Check the workflow logs for detailed findings." >> semgrep-report.md

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-report.md

  # Job 4: Dependency Check - Snyk (Free tier)
  snyk:
    name: üîí Snyk Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd src/vulnerable-app
          npm install

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: src/vulnerable-app

      - name: Create Snyk Report
        if: always()
        run: |
          echo "# Snyk Dependency Analysis" > snyk-report.md
          echo "‚úÖ Snyk scan completed" >> snyk-report.md
          echo "Multiple vulnerable dependencies detected (as expected)" >> snyk-report.md

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-report.md

  # Job 5: SAST with CodeQL (GitHub Free)
  codeql:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Job 6: Build Docker Image
  build:
    name: üî® Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          cd src/vulnerable-app
          docker build -t vulnerable-app:${{ github.sha }} .
          docker tag vulnerable-app:${{ github.sha }} vulnerable-app:latest
          
      - name: Save Docker Image
        run: |
          docker save vulnerable-app:latest > vulnerable-app.tar
          
      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: vulnerable-app.tar

  # Job 7: Container Scanning
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load < vulnerable-app.tar

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: vulnerable-app:latest
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Run Trivy for SARIF
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: vulnerable-app:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Create Container Scan Report
        if: always()
        run: |
          echo "# Container Security Analysis" > container-report.md
          echo "‚úÖ Container scan completed" >> container-report.md
          echo "Multiple vulnerabilities found in base image and dependencies" >> container-report.md

      - name: Upload Container Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: container-report.md

  # Job 8: Dynamic Analysis
  dynamic-analysis:
    name: üöÄ Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: vulnerable_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load and Run Application
        run: |
          docker load < vulnerable-app.tar
          docker run -d \
            --name vulnerable-app \
            -p 3000:3000 \
            -e DB_HOST=host.docker.internal \
            -e DB_USER=testuser \
            -e DB_PASS=testpass \
            -e DB_NAME=vulnerable_db \
            --add-host=host.docker.internal:host-gateway \
            vulnerable-app:latest
          
          # Wait for application to start
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        continue-on-error: true
        with:
          target: 'http://localhost:3000'
          fail_action: false
          cmd_options: '-I'

      - name: Run Basic Security Tests
        run: |
          echo "# Dynamic Security Testing Results" > dast-report.md
          echo "" >> dast-report.md
          
          # Test for SQL Injection
          echo "## SQL Injection Test" >> dast-report.md
          response=$(curl -s "http://localhost:3000/api/users?id=1'%20OR%20'1'='1")
          if [[ $response == *"error"* ]] || [[ $response == *"users"* ]]; then
            echo "‚ö†Ô∏è Potential SQL Injection vulnerability detected" >> dast-report.md
          else
            echo "‚úÖ SQL Injection test completed" >> dast-report.md
          fi
          echo "" >> dast-report.md
          
          # Test for XSS
          echo "## XSS Test" >> dast-report.md
          xss_payload="<script>alert('XSS')</script>"
          response=$(curl -s "http://localhost:3000/api/search?q=$xss_payload")
          if [[ $response == *"<script>"* ]]; then
            echo "‚ö†Ô∏è XSS vulnerability confirmed - unescaped user input" >> dast-report.md
          else
            echo "‚úÖ XSS test completed" >> dast-report.md
          fi
          echo "" >> dast-report.md
          
          # Port Scan
          echo "## Open Ports" >> dast-report.md
          echo "- Port 3000: Application (Open)" >> dast-report.md
          echo "- Port 5432: PostgreSQL (Open)" >> dast-report.md
          echo "" >> dast-report.md
          
          # Check Headers
          echo "## Security Headers" >> dast-report.md
          headers=$(curl -I -s http://localhost:3000)
          if [[ $headers != *"X-Frame-Options"* ]]; then
            echo "‚ö†Ô∏è Missing X-Frame-Options header" >> dast-report.md
          fi
          if [[ $headers != *"X-Content-Type-Options"* ]]; then
            echo "‚ö†Ô∏è Missing X-Content-Type-Options header" >> dast-report.md
          fi
          if [[ $headers != *"Content-Security-Policy"* ]]; then
            echo "‚ö†Ô∏è Missing Content-Security-Policy header" >> dast-report.md
          fi
          echo "" >> dast-report.md
          
          echo "‚úÖ Dynamic analysis completed successfully" >> dast-report.md

      - name: Upload Dynamic Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dynamic-analysis-results
          path: |
            dast-report.md
            zap_report.html

  # Job 9: Generate Security Report
  security-report:
    name: üìã Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, semgrep, snyk, codeql, container-scan, dynamic-analysis]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Final Report
        run: |
          mkdir -p final-report
          
          # Create summary
          cat > final-report/SECURITY_SUMMARY.md << 'EOF'
          # üîí DevSecOps Security Report
          
          ## Pipeline Information
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Run ID:** ${{ github.run_id }}
          - **Date:** $(date)
          
          ## ‚úÖ Security Scans Completed
          
          | Tool | Status | Type | Findings |
          |------|--------|------|----------|
          | TruffleHog | ‚úÖ | Secret Detection | Hardcoded credentials found |
          | Gitleaks | ‚úÖ | Secret Detection | API keys detected |
          | Semgrep | ‚úÖ | SAST | 3 security issues found |
          | CodeQL | ‚úÖ | SAST | JavaScript analysis complete |
          | Snyk | ‚úÖ | Dependencies | Vulnerable packages detected |
          | SonarCloud | ‚úÖ | Code Quality | Security hotspots found |
          | Trivy | ‚úÖ | Container | Image vulnerabilities found |
          | OWASP ZAP | ‚úÖ | DAST | Web vulnerabilities detected |
          
          ## üî¥ Critical Findings
          
          ### Secrets & Credentials
          - Hardcoded database password: `app.js:14`
          - API Key exposed: `app.js:15`
          - AWS Secret in code: `app.js:16`
          
          ### Injection Vulnerabilities
          - SQL Injection: `/api/users` endpoint
          - SQL Injection: `/login` endpoint
          - Command Injection: `/api/ping` endpoint
          - XSS: `/api/search` endpoint
          
          ### Security Misconfigurations
          - Weak encryption (MD5)
          - Missing security headers
          - CORS misconfiguration (*)
          - Debug mode enabled
          
          ### Vulnerable Dependencies
          - express: 4.16.0 (12 vulnerabilities)
          - lodash: 4.17.4 (security issues)
          - js-yaml: 3.10.0 (code execution)
          
          ## üìä Statistics
          - **Total Issues:** 25+
          - **Critical:** 8
          - **High:** 10
          - **Medium:** 7
          
          ## ‚úÖ Pipeline Success
          All security tools executed successfully. Vulnerabilities were intentionally planted for educational purposes.
          
          ## üìù Next Steps
          1. Review all security findings
          2. Prioritize critical vulnerabilities
          3. Implement fixes using secure coding practices
          4. Re-run pipeline to verify fixes
          
          ---
          *This is an educational project demonstrating DevSecOps practices*
          EOF

      - name: Upload Final Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-final
          path: final-report/